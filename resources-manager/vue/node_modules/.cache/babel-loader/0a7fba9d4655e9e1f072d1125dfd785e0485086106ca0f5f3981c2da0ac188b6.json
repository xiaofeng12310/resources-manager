{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || {}),\n      trainingList: [],\n      myApplyList: [],\n      allApplyList: []\n    };\n  },\n  methods: {\n    getStatusType(status) {\n      const statusMap = {\n        '已报名': 'warning',\n        '已通过': 'success',\n        '已拒绝': 'danger',\n        '已取消': 'info'\n      };\n      return statusMap[status] || 'info';\n    },\n    formatTime(row, column, cellValue) {\n      if (!cellValue) return '无';\n      const date = new Date(cellValue);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      }).replace(/\\//g, '-').replace(/,/g, '');\n    },\n    async loadTrainings() {\n      try {\n        const res = await this.$request.get('/training');\n        this.trainingList = res.data.map(item => ({\n          ...item,\n          applied: false\n        }));\n        this.syncApplyStatus();\n      } catch (error) {\n        console.error('加载培训列表失败:', error);\n      }\n    },\n    async loadMyApply() {\n      try {\n        const res = await this.$request.get('/training/apply/my');\n        this.myApplyList = res.data || [];\n        this.syncApplyStatus();\n      } catch (error) {\n        console.error('加载报名记录失败:', error);\n      }\n    },\n    syncApplyStatus() {\n      this.trainingList.forEach(training => {\n        training.applied = this.myApplyList.some(apply => apply.trainingId === training.id);\n      });\n    },\n    loadAllApply() {\n      this.$request.get('/training/apply').then(res => {\n        this.allApplyList = res.data;\n      });\n    },\n    async handleApply(row) {\n      try {\n        await this.$request.post('/training/apply', {\n          trainingId: row.id\n        });\n        this.$message.success('报名成功');\n        await this.loadMyApply();\n      } catch (error) {\n        this.$message.error('报名失败: ' + (error.response?.data?.message || error.message));\n      }\n    },\n    handleStatusChange(row) {\n      this.$request.put('/training/apply', row).then(() => {\n        this.$message.success('状态已更新');\n      });\n    },\n    async handleCancel(id) {\n      try {\n        await this.$confirm('确认取消该报名？', '提示', {\n          type: 'warning'\n        });\n        await this.$request.delete(`/training/apply/${id}`);\n        this.$message.success('取消成功');\n        await Promise.all([this.loadMyApply(), this.loadTrainings()]);\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('取消失败: ' + (error.response?.data?.message || error.message));\n        }\n      }\n    }\n  },\n  async mounted() {\n    await this.loadTrainings();\n    if (this.user.role === 'ADMIN' || this.user.level === '主管') {\n      this.loadAllApply();\n    } else {\n      await this.loadMyApply();\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","trainingList","myApplyList","allApplyList","methods","getStatusType","status","statusMap","formatTime","row","column","cellValue","date","Date","toLocaleString","year","month","day","hour","minute","second","hour12","replace","loadTrainings","res","$request","get","map","item","applied","syncApplyStatus","error","console","loadMyApply","forEach","training","some","apply","trainingId","id","loadAllApply","then","handleApply","post","$message","success","response","message","handleStatusChange","put","handleCancel","$confirm","type","delete","Promise","all","mounted","role","level"],"sources":["src/views/manager/TrainingApply.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 普通员工视图 -->\r\n    <template v-if=\"user.level === '员工'\">\r\n      <el-table :data=\"trainingList\" border stripe>\r\n        <el-table-column prop=\"name\" label=\"培训名称\"></el-table-column>\r\n        <el-table-column prop=\"time\" label=\"时间\" width=\"180\"></el-table-column>\r\n        <el-table-column prop=\"location\" label=\"地点\"></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"120\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button\r\n                type=\"primary\"\r\n                size=\"mini\"\r\n                @click=\"handleApply(scope.row)\"\r\n                :disabled=\"scope.row.applied\"\r\n            >{{ scope.row.applied ? '已报名' : '报名' }}</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 我的报名记录 -->\r\n      <el-divider content-position=\"left\">我的报名记录</el-divider>\r\n      <el-table :data=\"myApplyList\" border>\r\n        <el-table-column prop=\"trainingName\" label=\"培训项目\"></el-table-column>\r\n        <el-table-column prop=\"applyTime\" label=\"报名时间\" width=\"180\" :formatter=\"formatTime\"></el-table-column>\r\n        <el-table-column label=\"状态\" width=\"150\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\">\r\n              {{ scope.row.status }}\r\n            </el-tag>\r\n            <el-button\r\n                v-if=\"scope.row.status === '已报名'\"\r\n                type=\"danger\"\r\n                size=\"mini\"\r\n                @click=\"handleCancel(scope.row.id)\"\r\n                style=\"margin-left: 10px\"\r\n            >取消</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </template>\r\n\r\n    <!-- 管理员视图 -->\r\n    <template v-else-if=\"user.role === 'ADMIN' || user.level === '主管'\">\r\n      <el-table :data=\"allApplyList\">\r\n        <el-table-column prop=\"employeeName\" label=\"员工姓名\" />\r\n        <el-table-column prop=\"trainingName\" label=\"培训项目\" />\r\n        <el-table-column label=\"状态\">\r\n          <template slot-scope=\"scope\">\r\n            <el-select v-model=\"scope.row.status\" @change=\"handleStatusChange(scope.row)\">\r\n              <el-option label=\"已报名\" value=\"已报名\" />\r\n              <el-option label=\"已通过\" value=\"已通过\" />\r\n              <el-option label=\"已拒绝\" value=\"已拒绝\" />\r\n            </el-select>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || {}),\r\n          trainingList: [],\r\n        myApplyList: [],\r\n        allApplyList: []\r\n  }\r\n  },\r\n  methods: {\r\n    getStatusType(status) {\r\n      const statusMap = {\r\n        '已报名': 'warning',\r\n        '已通过': 'success',\r\n        '已拒绝': 'danger',\r\n        '已取消': 'info'\r\n      };\r\n      return statusMap[status] || 'info';\r\n    },\r\n\r\n    formatTime(row, column, cellValue) {\r\n      if (!cellValue) return '无';\r\n      const date = new Date(cellValue);\r\n      return date.toLocaleString('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false\r\n      }).replace(/\\//g, '-').replace(/,/g, '');\r\n    },\r\n\r\n    async loadTrainings() {\r\n      try {\r\n        const res = await this.$request.get('/training');\r\n        this.trainingList = res.data.map(item => ({\r\n          ...item,\r\n          applied: false\r\n        }));\r\n        this.syncApplyStatus();\r\n      } catch (error) {\r\n        console.error('加载培训列表失败:', error);\r\n      }\r\n    },\r\n\r\n    async loadMyApply() {\r\n      try {\r\n        const res = await this.$request.get('/training/apply/my');\r\n        this.myApplyList = res.data || [];\r\n        this.syncApplyStatus();\r\n      } catch (error) {\r\n        console.error('加载报名记录失败:', error);\r\n      }\r\n    },\r\n\r\n    syncApplyStatus() {\r\n      this.trainingList.forEach(training => {\r\n        training.applied = this.myApplyList.some(\r\n            apply => apply.trainingId === training.id\r\n        );\r\n      });\r\n    },\r\n\r\n    loadAllApply() {\r\n      this.$request.get('/training/apply').then(res => {\r\n        this.allApplyList = res.data;\r\n      });\r\n    },\r\n\r\n    async handleApply(row) {\r\n      try {\r\n        await this.$request.post('/training/apply', {\r\n          trainingId: row.id\r\n        });\r\n        this.$message.success('报名成功');\r\n        await this.loadMyApply();\r\n      } catch (error) {\r\n        this.$message.error('报名失败: ' + (error.response?.data?.message || error.message));\r\n      }\r\n    },\r\n\r\n    handleStatusChange(row) {\r\n      this.$request.put('/training/apply', row).then(() => {\r\n        this.$message.success('状态已更新');\r\n      });\r\n    },\r\n\r\n    async handleCancel(id) {\r\n      try {\r\n        await this.$confirm('确认取消该报名？', '提示', { type: 'warning' });\r\n        await this.$request.delete(`/training/apply/${id}`);\r\n        this.$message.success('取消成功');\r\n        await Promise.all([this.loadMyApply(), this.loadTrainings()]);\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('取消失败: ' + (error.response?.data?.message || error.message));\r\n        }\r\n      }\r\n    }\r\n  },\r\n  async mounted() {\r\n    await this.loadTrainings();\r\n    if (this.user.role === 'ADMIN' || this.user.level === '主管') {\r\n      this.loadAllApply();\r\n    } else {\r\n      await this.loadMyApply();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.el-divider {\r\n  margin: 20px 0;\r\n}\r\n.el-table {\r\n  margin-top: 10px;\r\n}\r\n</style>"],"mappings":";;;;AA8DA;EACAA,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,YAAA;MACAC,WAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACAC,cAAAC,MAAA;MACA,MAAAC,SAAA;QACA;QACA;QACA;QACA;MACA;MACA,OAAAA,SAAA,CAAAD,MAAA;IACA;IAEAE,WAAAC,GAAA,EAAAC,MAAA,EAAAC,SAAA;MACA,KAAAA,SAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,SAAA;MACA,OAAAC,IAAA,CAAAE,cAAA;QACAC,IAAA;QACAC,KAAA;QACAC,GAAA;QACAC,IAAA;QACAC,MAAA;QACAC,MAAA;QACAC,MAAA;MACA,GAAAC,OAAA,aAAAA,OAAA;IACA;IAEA,MAAAC,cAAA;MACA;QACA,MAAAC,GAAA,cAAAC,QAAA,CAAAC,GAAA;QACA,KAAAzB,YAAA,GAAAuB,GAAA,CAAA7B,IAAA,CAAAgC,GAAA,CAAAC,IAAA;UACA,GAAAA,IAAA;UACAC,OAAA;QACA;QACA,KAAAC,eAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;MACA;IACA;IAEA,MAAAE,YAAA;MACA;QACA,MAAAT,GAAA,cAAAC,QAAA,CAAAC,GAAA;QACA,KAAAxB,WAAA,GAAAsB,GAAA,CAAA7B,IAAA;QACA,KAAAmC,eAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;MACA;IACA;IAEAD,gBAAA;MACA,KAAA7B,YAAA,CAAAiC,OAAA,CAAAC,QAAA;QACAA,QAAA,CAAAN,OAAA,QAAA3B,WAAA,CAAAkC,IAAA,CACAC,KAAA,IAAAA,KAAA,CAAAC,UAAA,KAAAH,QAAA,CAAAI,EACA;MACA;IACA;IAEAC,aAAA;MACA,KAAAf,QAAA,CAAAC,GAAA,oBAAAe,IAAA,CAAAjB,GAAA;QACA,KAAArB,YAAA,GAAAqB,GAAA,CAAA7B,IAAA;MACA;IACA;IAEA,MAAA+C,YAAAjC,GAAA;MACA;QACA,WAAAgB,QAAA,CAAAkB,IAAA;UACAL,UAAA,EAAA7B,GAAA,CAAA8B;QACA;QACA,KAAAK,QAAA,CAAAC,OAAA;QACA,WAAAZ,WAAA;MACA,SAAAF,KAAA;QACA,KAAAa,QAAA,CAAAb,KAAA,aAAAA,KAAA,CAAAe,QAAA,EAAAnD,IAAA,EAAAoD,OAAA,IAAAhB,KAAA,CAAAgB,OAAA;MACA;IACA;IAEAC,mBAAAvC,GAAA;MACA,KAAAgB,QAAA,CAAAwB,GAAA,oBAAAxC,GAAA,EAAAgC,IAAA;QACA,KAAAG,QAAA,CAAAC,OAAA;MACA;IACA;IAEA,MAAAK,aAAAX,EAAA;MACA;QACA,WAAAY,QAAA;UAAAC,IAAA;QAAA;QACA,WAAA3B,QAAA,CAAA4B,MAAA,oBAAAd,EAAA;QACA,KAAAK,QAAA,CAAAC,OAAA;QACA,MAAAS,OAAA,CAAAC,GAAA,OAAAtB,WAAA,SAAAV,aAAA;MACA,SAAAQ,KAAA;QACA,IAAAA,KAAA;UACA,KAAAa,QAAA,CAAAb,KAAA,aAAAA,KAAA,CAAAe,QAAA,EAAAnD,IAAA,EAAAoD,OAAA,IAAAhB,KAAA,CAAAgB,OAAA;QACA;MACA;IACA;EACA;EACA,MAAAS,QAAA;IACA,WAAAjC,aAAA;IACA,SAAA3B,IAAA,CAAA6D,IAAA,qBAAA7D,IAAA,CAAA8D,KAAA;MACA,KAAAlB,YAAA;IACA;MACA,WAAAP,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}