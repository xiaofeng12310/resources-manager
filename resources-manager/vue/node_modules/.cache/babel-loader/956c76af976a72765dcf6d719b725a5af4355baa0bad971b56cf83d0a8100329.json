{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || {}),\n      // 这里修复了括号问题\n      trainingList: [],\n      // 可报名培训列表\n      myApplyList: [],\n      // 我的报名记录\n      allApplyList: [] // 所有报名记录（管理员）\n    };\n  },\n  methods: {\n    getStatusType(status) {\n      switch (status) {\n        case '已通过':\n          return 'success';\n        case '已拒绝':\n          return 'danger';\n        case '已报名':\n          return 'warning';\n        default:\n          return 'info';\n      }\n    },\n    formatTime(row, column, cellValue) {\n      if (!cellValue) return '无';\n      // 如果是 ISO 8601 格式（如 \"2025-04-07T06:11:26.000+00:00\"）\n      const date = new Date(cellValue);\n      // 转为本地时间格式：YYYY-MM-DD HH:mm:ss\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false // 24小时制\n      }).replace(/\\//g, '-').replace(/,/g, '');\n    },\n    // 加载培训列表\n    loadTrainings() {\n      this.$request.get('/training').then(res => {\n        this.trainingList = res.data.map(item => ({\n          ...item,\n          applied: false // 需要后端接口判断\n        }));\n      });\n    },\n    // 加载我的报名\n    loadMyApply() {\n      this.$request.get('/training/apply/my').then(res => {\n        console.log('报名记录数据:', res.data); // 添加调试日志\n        this.myApplyList = res.data || []; // 确保不会赋值为undefined\n\n        // 标记已报名项目（如果trainingList需要此信息）\n        if (this.trainingList) {\n          this.trainingList.forEach(item => {\n            item.applied = this.myApplyList.some(a => a.trainingId === item.id);\n            item.status = this.myApplyList.find(a => a.trainingId === item.id)?.status || '';\n          });\n        }\n      }).catch(err => {\n        console.error('加载报名记录失败:', err);\n        this.$message.error('加载数据失败');\n      });\n    },\n    // 加载所有报名（管理员）\n    loadAllApply() {\n      this.$request.get('/training/apply').then(res => {\n        this.allApplyList = res.data;\n      });\n    },\n    // 点击报名\n    handleApply(row) {\n      this.$request.post('/training/apply', {\n        trainingId: row.id\n      }).then(() => {\n        this.$message.success('报名成功');\n        this.loadMyApply();\n      });\n    },\n    // 状态变更（管理员）\n    handleStatusChange(row) {\n      this.$request.put('/training/apply', row).then(() => {\n        this.$message.success('状态已更新');\n      });\n    }\n  },\n  handleCancel(id) {\n    this.$confirm('确认取消该报名？', '提示', {\n      type: 'warning'\n    }).then(() => {\n      this.$request.delete(`/training/apply/${id}`).then(() => {\n        this.$message.success('取消成功');\n        this.loadMyApply(); // 刷新列表\n      });\n    });\n  },\n  mounted() {\n    // 1. 所有用户都加载可报名的培训列表\n    this.loadTrainings();\n\n    // 2. 根据角色加载不同的数据\n    if (this.user.role === 'ADMIN' || this.user.level === '主管') {\n      this.loadAllApply(); // 管理员/主管：加载所有报名记录\n    } else {\n      this.loadMyApply(); // 普通员工：加载自己的报名记录\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","trainingList","myApplyList","allApplyList","methods","getStatusType","status","formatTime","row","column","cellValue","date","Date","toLocaleString","year","month","day","hour","minute","second","hour12","replace","loadTrainings","$request","get","then","res","map","item","applied","loadMyApply","console","log","forEach","some","a","trainingId","id","find","catch","err","error","$message","loadAllApply","handleApply","post","success","handleStatusChange","put","handleCancel","$confirm","type","delete","mounted","role","level"],"sources":["src/views/manager/TrainingApply.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 普通员工视图 -->\r\n    <template v-if=\"user.level === '员工'\">\r\n      <el-table :data=\"trainingList\" border stripe>\r\n        <el-table-column prop=\"name\" label=\"培训名称\"></el-table-column>\r\n        <el-table-column prop=\"time\" label=\"时间\" width=\"180\"></el-table-column>\r\n        <el-table-column prop=\"location\" label=\"地点\"></el-table-column>\r\n        <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\">\r\n              {{ scope.row.status }}\r\n            </el-tag>\r\n            <el-button\r\n                v-if=\"user.level === '员工' && scope.row.status === '已报名'\"\r\n                type=\"danger\"\r\n                size=\"mini\"\r\n                @click=\"handleCancel(scope.row.id)\"\r\n                style=\"margin-left: 10px\"\r\n            >取消</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 我的报名记录 -->\r\n      <el-divider content-position=\"left\">我的报名记录</el-divider>\r\n      <el-table :data=\"myApplyList\" border>\r\n        <el-table-column prop=\"trainingName\" label=\"培训项目\"></el-table-column>\r\n        <el-table-column prop=\"applyTime\" label=\"报名时间\" width=\"180\" :formatter=\"formatTime\"></el-table-column>\r\n        <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"scope.row.status === '已通过' ? 'success' : 'warning'\">\r\n              {{ scope.row.status }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </template>\r\n\r\n    <!-- 管理员视图 -->\r\n    <template v-else-if=\"user.role === 'ADMIN' || user.level === '主管'\">\r\n      <el-table :data=\"allApplyList\">\r\n        <el-table-column prop=\"employeeName\" label=\"员工姓名\" />\r\n        <el-table-column prop=\"trainingName\" label=\"培训项目\" />\r\n        <el-table-column label=\"状态\">\r\n          <template slot-scope=\"scope\">\r\n            <el-select v-model=\"scope.row.status\" @change=\"handleStatusChange(scope.row)\">\r\n              <el-option label=\"已报名\" value=\"已报名\" />\r\n              <el-option label=\"已通过\" value=\"已通过\" />\r\n              <el-option label=\"已拒绝\" value=\"已拒绝\" />\r\n            </el-select>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || {}),  // 这里修复了括号问题\r\n      trainingList: [],    // 可报名培训列表\r\n      myApplyList: [],    // 我的报名记录\r\n      allApplyList: []    // 所有报名记录（管理员）\r\n    }\r\n  },\r\n  methods: {\r\n    getStatusType(status) {\r\n      switch(status) {\r\n        case '已通过': return 'success';\r\n        case '已拒绝': return 'danger';\r\n        case '已报名': return 'warning';\r\n        default: return 'info';\r\n      }\r\n    },\r\n\r\n    formatTime(row, column, cellValue) {\r\n      if (!cellValue) return '无';\r\n      // 如果是 ISO 8601 格式（如 \"2025-04-07T06:11:26.000+00:00\"）\r\n      const date = new Date(cellValue);\r\n      // 转为本地时间格式：YYYY-MM-DD HH:mm:ss\r\n      return date.toLocaleString('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false // 24小时制\r\n      }).replace(/\\//g, '-').replace(/,/g, '');\r\n    },\r\n    // 加载培训列表\r\n    loadTrainings() {\r\n      this.$request.get('/training').then(res => {\r\n        this.trainingList = res.data.map(item => ({\r\n          ...item,\r\n          applied: false  // 需要后端接口判断\r\n        }))\r\n      })\r\n    },\r\n    // 加载我的报名\r\n    loadMyApply() {\r\n      this.$request.get('/training/apply/my').then(res => {\r\n        console.log('报名记录数据:', res.data); // 添加调试日志\r\n        this.myApplyList = res.data || []; // 确保不会赋值为undefined\r\n\r\n        // 标记已报名项目（如果trainingList需要此信息）\r\n        if (this.trainingList) {\r\n          this.trainingList.forEach(item => {\r\n            item.applied = this.myApplyList.some(a => a.trainingId === item.id);\r\n            item.status = this.myApplyList.find(a => a.trainingId === item.id)?.status || '';\r\n          });\r\n        }\r\n      }).catch(err => {\r\n        console.error('加载报名记录失败:', err);\r\n        this.$message.error('加载数据失败');\r\n      });\r\n    },\r\n    // 加载所有报名（管理员）\r\n    loadAllApply() {\r\n      this.$request.get('/training/apply').then(res => {\r\n        this.allApplyList = res.data\r\n      })\r\n    },\r\n    // 点击报名\r\n    handleApply(row) {\r\n      this.$request.post('/training/apply', { trainingId: row.id }).then(() => {\r\n        this.$message.success('报名成功')\r\n        this.loadMyApply()\r\n      })\r\n    },\r\n    // 状态变更（管理员）\r\n    handleStatusChange(row) {\r\n      this.$request.put('/training/apply', row).then(() => {\r\n        this.$message.success('状态已更新')\r\n      })\r\n    }\r\n  },\r\n  handleCancel(id) {\r\n    this.$confirm('确认取消该报名？', '提示', { type: 'warning' }).then(() => {\r\n      this.$request.delete(`/training/apply/${id}`).then(() => {\r\n        this.$message.success('取消成功');\r\n        this.loadMyApply();  // 刷新列表\r\n      })\r\n    })\r\n  },\r\n  mounted() {\r\n    // 1. 所有用户都加载可报名的培训列表\r\n    this.loadTrainings();\r\n\r\n    // 2. 根据角色加载不同的数据\r\n    if (this.user.role === 'ADMIN' || this.user.level === '主管') {\r\n      this.loadAllApply(); // 管理员/主管：加载所有报名记录\r\n    } else {\r\n      this.loadMyApply();  // 普通员工：加载自己的报名记录\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.el-divider {\r\n  margin: 20px 0;\r\n}\r\n.el-table {\r\n  margin-top: 10px;\r\n}\r\n</style>"],"mappings":";;;;;AA2DA;EACAA,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MAAA;MACAC,YAAA;MAAA;MACAC,WAAA;MAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACAC,cAAAC,MAAA;MACA,QAAAA,MAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;MACA;IACA;IAEAC,WAAAC,GAAA,EAAAC,MAAA,EAAAC,SAAA;MACA,KAAAA,SAAA;MACA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,SAAA;MACA;MACA,OAAAC,IAAA,CAAAE,cAAA;QACAC,IAAA;QACAC,KAAA;QACAC,GAAA;QACAC,IAAA;QACAC,MAAA;QACAC,MAAA;QACAC,MAAA;MACA,GAAAC,OAAA,aAAAA,OAAA;IACA;IACA;IACAC,cAAA;MACA,KAAAC,QAAA,CAAAC,GAAA,cAAAC,IAAA,CAAAC,GAAA;QACA,KAAAzB,YAAA,GAAAyB,GAAA,CAAA/B,IAAA,CAAAgC,GAAA,CAAAC,IAAA;UACA,GAAAA,IAAA;UACAC,OAAA;QACA;MACA;IACA;IACA;IACAC,YAAA;MACA,KAAAP,QAAA,CAAAC,GAAA,uBAAAC,IAAA,CAAAC,GAAA;QACAK,OAAA,CAAAC,GAAA,YAAAN,GAAA,CAAA/B,IAAA;QACA,KAAAO,WAAA,GAAAwB,GAAA,CAAA/B,IAAA;;QAEA;QACA,SAAAM,YAAA;UACA,KAAAA,YAAA,CAAAgC,OAAA,CAAAL,IAAA;YACAA,IAAA,CAAAC,OAAA,QAAA3B,WAAA,CAAAgC,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,UAAA,KAAAR,IAAA,CAAAS,EAAA;YACAT,IAAA,CAAAtB,MAAA,QAAAJ,WAAA,CAAAoC,IAAA,CAAAH,CAAA,IAAAA,CAAA,CAAAC,UAAA,KAAAR,IAAA,CAAAS,EAAA,GAAA/B,MAAA;UACA;QACA;MACA,GAAAiC,KAAA,CAAAC,GAAA;QACAT,OAAA,CAAAU,KAAA,cAAAD,GAAA;QACA,KAAAE,QAAA,CAAAD,KAAA;MACA;IACA;IACA;IACAE,aAAA;MACA,KAAApB,QAAA,CAAAC,GAAA,oBAAAC,IAAA,CAAAC,GAAA;QACA,KAAAvB,YAAA,GAAAuB,GAAA,CAAA/B,IAAA;MACA;IACA;IACA;IACAiD,YAAApC,GAAA;MACA,KAAAe,QAAA,CAAAsB,IAAA;QAAAT,UAAA,EAAA5B,GAAA,CAAA6B;MAAA,GAAAZ,IAAA;QACA,KAAAiB,QAAA,CAAAI,OAAA;QACA,KAAAhB,WAAA;MACA;IACA;IACA;IACAiB,mBAAAvC,GAAA;MACA,KAAAe,QAAA,CAAAyB,GAAA,oBAAAxC,GAAA,EAAAiB,IAAA;QACA,KAAAiB,QAAA,CAAAI,OAAA;MACA;IACA;EACA;EACAG,aAAAZ,EAAA;IACA,KAAAa,QAAA;MAAAC,IAAA;IAAA,GAAA1B,IAAA;MACA,KAAAF,QAAA,CAAA6B,MAAA,oBAAAf,EAAA,IAAAZ,IAAA;QACA,KAAAiB,QAAA,CAAAI,OAAA;QACA,KAAAhB,WAAA;MACA;IACA;EACA;EACAuB,QAAA;IACA;IACA,KAAA/B,aAAA;;IAEA;IACA,SAAA1B,IAAA,CAAA0D,IAAA,qBAAA1D,IAAA,CAAA2D,KAAA;MACA,KAAAZ,YAAA;IACA;MACA,KAAAb,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}